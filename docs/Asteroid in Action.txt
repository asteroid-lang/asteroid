..
    /******************************************************************
    This is the source file from which the action doc is generated.
    We use cpp to insert live code snippets into the document.
    In order to generate the action doc run the following command
    on a Unix-like system:

    cpp -w -P "Asteroid in Action.txt" > "Asteroid in Action.rst"

    ******************************************************************/
#include "header.txt"

.. highlight:: none

Asteroid in Action
==================

This document was inspired by Andrew Shitov's excellent book `Using Raku: 100 Programming Challenges Solved with the Brand-New Raku Programming Language <https://andrewshitov.com/wp-content/uploads/2020/01/Using-Raku.pdf>`_.  Here we use Asteroid to solve these programming challenges.

Section: Using Strings
----------------------

Challenge: Hello, World!
^^^^^^^^^^^^^^^^^^^^^^^^

> Print ‘Hello, World!’

The canonical ``Hello, World!`` program.  The easiest way to write this in Asteroid is,
::
#include "../asteroid/test-suites/action-tests/test001.ast"

Output::

    Hello, World!



Challenge: Greet a person
^^^^^^^^^^^^^^^^^^^^^^^^^

> Ask a user for their name and greet them by printing ‘Hello, <Name\>!’

Here is our first solution using a separate function for each of the steps,
::
#include "../asteroid/test-suites/action-tests/test003.ast"


Letting the function ``input`` do the prompting,
::
#include "../asteroid/test-suites/action-tests/test004.ast"

Doing everything in one step,
::
#include "../asteroid/test-suites/action-tests/test005.ast"

Challenge: String length
^^^^^^^^^^^^^^^^^^^^^^^^

> Print the length of a string.

In order to print the length of a string we can use the function ``len`` available in the ``util`` module,
::
#include "../asteroid/test-suites/action-tests/test006.ast"

Output::

    6


We can also use the string member function ``length`` in order to compute the length of the string,
::
#include "../asteroid/test-suites/action-tests/test007.ast"

Output::

    6


Challenge: Unique digits
^^^^^^^^^^^^^^^^^^^^^^^^

> Print unique digits from a given integer number.

In order to accomplish this we take advantage of the string ``explode`` function and the ``sort`` function on lists.
Finally we use the ``reduce`` function to map a list with repeated digits to a list with unique digits,
::
#include "../asteroid/test-suites/action-tests/test008.ast"

Output::

    [1,2,3]


Probably the most noteworthy characteric about this program is the ``reduce`` function.  The ``reduce`` function applies a binary function to a list.  The first argument of the binary function acts like an accumulator, and the second argument gets instantiated with the elements of the list to be processed.  In our function ``unique``, the variable ``x`` is the accumulator with an initial value of ``[]``.  The function tests whether the element ``y`` is in the list.  If it is not, then it adds it to the list. Otherwise, it just returns the accumulator unchanged.

Section: Modifying String Data
------------------------------

Challenge: Reverse a string
^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print a string in the reversed order from right to left.

We use the ``explode`` function to turn a string into a list of characters. Then, we reverse the list and turn it back into a string using the ``join`` function,
::
#include "../asteroid/test-suites/action-tests/test009.ast"

Output::

    !dlroW ,olleH


Challenge: Removing blanks from a string
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Remove leading, trailing, and double spaces from a given string.
::
#include "../asteroid/test-suites/action-tests/test010.ast"

Output::

    Hello, World!


Challenge: Camel case
^^^^^^^^^^^^^^^^^^^^^

> Create a camel-case identifier from a given phrase.

In this task, we will form the ``CamelCase`` variable for names from a given phrase.
Names created in this style are built of several words, each of which starts
with a capital letter.
::
#include "../asteroid/test-suites/action-tests/test011.ast"

Output::

    OnceUponATime


Challenge: Incrementing filenames
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Generate a list of filenames like file1.txt, file2.txt, etc.
::
#include "../asteroid/test-suites/action-tests/test012.ast"

Output::

    file1.txt
    file2.txt
    file3.txt
    file4.txt
    file5.txt


Challenge: Random passwords
^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Generate a random string that can be used as a password.

In our solution we take advantage of Asteroid's ``Pick`` object.  The ``Pick`` object maintains a list of items that we can randomly select from using the ``pick`` member function.  As input to the ``Pick`` object, we compute a bunch of lists of characters that are useful for password construction.  The function ``achar`` converts a decimal ASCII code to a single character string.
::
#include "../asteroid/test-suites/action-tests/test013.ast"

Output::

    e3zvshdbS43brt#


Challenge: DNA-to-RNA transcription
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Convert the given DNA sequence to a compliment RNA.

We’ll not dig deep into the biology aspect of the problem. For us, it is important that the DNA is a string containing the four letters A, C, G, and T,
and the RNA is a string of A, C, G, and U. The transformation from DNA
to RNA happens according to the following table:
::

    DNA: A C G T
    RNA: U G C A

We will solve this programming problem using Asteroid's first-class patterns. We could have solved this with just testing equality on DNA characters. However, using first-class patterns is more general and can be applied to problems with a more structured mapping relationship.
::
#include "../asteroid/test-suites/action-tests/test014.ast"

Output::

    UGGUAGUCAG


Challenge: Caesar cipher
^^^^^^^^^^^^^^^^^^^^^^^^

> Encode a message using the Caesar cipher technique.

The Caesar code is a simple method of transcoding the letters of the message
so that each letter is replaced with the letter that occurs in the alphabet N
positions earlier or later.
For example, if N is 4, then the letter e becomes a, f is transformed to b,
etc. The alphabet is looped so that z becomes v, and letters a to d become
w to z.
::
#include "../asteroid/test-suites/action-tests/test015.ast"

Output::

    dahhk, sknhz!
    hello, world!


Section: Text Analysis
----------------------

Challenge: Plural endings
^^^^^^^^^^^^^^^^^^^^^^^^^

> Put a noun in the correct form — singular or plural — depending on the number next to it.

In program outputs, it is often required to print some number followed by a noun, for example::

    10 files found

If there is only one file, then the phrase should be ``1 file found`` instead.
::
#include "../asteroid/test-suites/action-tests/test016.ast"

Output::

    0 files found
    1 file found
    2 files found
    3 files found
    4 files found
    5 files found


Challenge: The most frequent word
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the most frequent word in the given text.

In our solution we use a hash table to count the number of word occurences.
::
#include "../asteroid/test-suites/action-tests/test017.ast"

Output::

    sed


Challenge: The longest common substring
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the longest common substring in the given two strings.

Let us limit ourselves with finding only the first longest substring. If there
are more common substrings of the same length, then the rest are ignored.
There are two loops (see also Task 17, The longest palindrome) over the first
string (``stra``). These use the index method to search for the substring in the
second string (``strb``).
::
#include "../asteroid/test-suites/action-tests/test018.ast"

Output::

    The longest common substring is ' fox '.


Challenge: Anagram test
^^^^^^^^^^^^^^^^^^^^^^^

> Tell if the two words are anagrams of each other.

An anagram is a word, phrase, or name formed by rearranging the letters of another, such as ``cinema``, formed from ``iceman``.
::
#include "../asteroid/test-suites/action-tests/test019.ast"

Output::

    Anagrams


Challenge: Palindrome test
^^^^^^^^^^^^^^^^^^^^^^^^^^

> Check if the entered string is palindromic.

A palindrome is a string that can be read from both ends: left to right or right
to left.
::
#include "../asteroid/test-suites/action-tests/test020.ast"

Output::

    Palindromic


Challenge: The longest palindrome
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the longest palindromic substring in the given string.

The main idea behind the solution is to scan the string with a window of
varying width. In other words, starting from a given character, test all the
substrings of any length possible at that position.
Now, extract the substring and do the check similar to the solution of Task
16, Palindrome test. Here, we have to be careful to check the palindrome
without taking into account the non-letter characters, but saving the result as
part of the original string.
::
#include "../asteroid/test-suites/action-tests/test021.ast"

Output::

    o, Wo


Challenge: Finding duplicate texts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find duplicate fragments in the same text.

We do this by finding and hashing N-grams after the appropriate preprocessing.  We will use ``N=3``.
::
#include "../asteroid/test-suites/action-tests/test022.ast"

Output::

    lorem ipsum dolor: 2
    ipsum dolor sit: 2
    dolor sit amet: 3
    sit amet consectetur: 2
    amet consectetur adipiscing: 2
    consectetur adipiscing elit: 2
    in hac habitasse: 2
    hac habitasse platea: 2
    habitasse platea dictumst: 2
    aliquet quam purus: 2
    diam sed nulla: 2
    sit amet condimentum: 2



Section: Using Numbers
----------------------

Challenge: Pi
^^^^^^^^^^^^^

> Print the value of pi.
::
#include "../asteroid/test-suites/action-tests/test023.ast"

Output::

    3.141592653589793

Other constants are also available.
::
#include "../asteroid/test-suites/action-tests/test024.ast"

Output::

    2.718281828459045
    6.283185307179586


Challenge: Factorial!
^^^^^^^^^^^^^^^^^^^^^

> Print the factorial of a given number.

By definition, the factorial of a positive integer number N is a product of all the integers numbering from 1 to N, including N. Our first solution is based on the direct implementation of the definition above using the list ``reduce`` function.
::
#include "../asteroid/test-suites/action-tests/test025.ast"

Output::

    6


Our second solution uses the recursive definition of factorial,
::

         | 1       if  x = 0,
    x! = | x(x-1)! if  x > 0,
         | undef   if  x < 0,

where :math:`x \in Int`.
Here, each case specifies what value the function should return if
the predicate applied to the input is true.  The last case is of some interest because it states that the function is undefined for negative integers.
::
#include "../asteroid/test-suites/action-tests/test026.ast"

Output::

    The factorial of 3 is: 6


Challenge: Fibonacci numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print the Nth Fibonacci number.

Fibonacci numbers are defined by the recurring formula:
::

    f_n = f_{n-1} + f_{n-2}

You can assign two values at a time (**Challenge: Swap two values**). You can use that technique for calculating the next Fibonacci number from the previous two. To bootstrap the algorithm, the two first values are needed. In one of the definitions of the Fibonacci row, the first two values are both 1.

Here we give an iterative solutions.  It is clear that there exists a trivial recursive solution by implementing the above formula.
::
#include "../asteroid/test-suites/action-tests/test027.ast"

Output::

    55


Challenge: Print squares
^^^^^^^^^^^^^^^^^^^^^^^^

> Print the squares of the numbers 1 through 10.

Of course this is straightforward, with a ``for-loop`` over a list.  Here we show another solution using the list ``map`` function.
::
#include "../asteroid/test-suites/action-tests/test028.ast"

Output::

    [1,4,9,16,25,36,49,64,81,100]


Challenge: Powers of two
^^^^^^^^^^^^^^^^^^^^^^^^

> Print the first ten powers of two.

Just as in the previous challenge, we skip the naive loop solution and give a solution using the ``map`` function.
::
#include "../asteroid/test-suites/action-tests/test029.ast"

Output::

    [1,2,4,8,16,32,64,128,256,512]


Challenge: Odd and even numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print the first ten odd numbers. Print the first ten even numbers.

We start with printing the first ten odd numbers,
::
#include "../asteroid/test-suites/action-tests/test030.ast"

Output::

    [1,3,5,7,9]


Now the even numbers,
::
#include "../asteroid/test-suites/action-tests/test031.ast"

Output:
::

    [2,4,6,8,10]


Challenge: Compare numbers approximately
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Compare the two non-integer values approximately.

Comparing non-integer numbers (which are represented as floating-point numbers) is often a task that requires approximate comparison.  In Asteroid this can be accomplished with the ``isclose`` function availabel in the ``math`` module.
::
#include "../asteroid/test-suites/action-tests/test032.ast"


Challenge: Prime numbers
^^^^^^^^^^^^^^^^^^^^^^^^

> Decide if the given number is a prime number.

Prime numbers are those that can be divided only by 1, and by themselves.
::
#include "../asteroid/test-suites/action-tests/test033.ast"

Output:
::

    true
    false


Challenge: List of prime numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print the list of the first ten prime numbers.
::
#include "../asteroid/test-suites/action-tests/test034.ast"

Output:
::

    2
    3
    5
    7
    11
    13
    17
    19
    23
    29


Challenge: Prime factors
^^^^^^^^^^^^^^^^^^^^^^^^

> Find the prime factors of a given number.

Prime factors are the prime numbers that divide the given integer number exactly.
::
#include "../asteroid/test-suites/action-tests/test035.ast"

Output:
::

    [3,5,11]


Challenge: Reducing a fraction
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Compose a fraction from the two given integers — numerator and denominator — and reduce it to lowest terms.

5/15 and 16/280 are examples of fractions that can be reduced. The final results of this task are 1/3 and 2/35. Generally, the algorithm of reducing a fraction requires searching for the greatest common divisor, and then dividing both numerator and denominator by that number.  For our solution we use the function ``gcd`` available in the ``math`` module.
::
#include "../asteroid/test-suites/action-tests/test036.ast"

Output:
::

    2
    35


Challenge: Divide by zero
^^^^^^^^^^^^^^^^^^^^^^^^^

> Do something with the division by zero.

Asteroid is an eager language, that is, expressions are evaluated as early as possible.  We can trap division-by-zero errors using a try-catch block.
::
#include "../asteroid/test-suites/action-tests/test037.ast"

Output:
::

    integer division or modulo by zero
    We are still alive...


Section: Random Numbers
-----------------------

Challenge: Generating random numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Generate a random number between 0 and N.

Asteroid has two random number generation functions: ``random()`` generates a random real value in the interval $[0.0,1.0)$ and ``randint(a,b)`` that generates a random value in the interval $[a,b]$.  The type of the random value generated depends on the type of the values a and b specifying the interval.
::
#include "../asteroid/test-suites/action-tests/test038.ast"

Output:
::

    0.6394267984578837
    0.025010755222666936
    1
    2.4489185380347624
    2


Challenge: Neumann’s random generator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Implement Von Neumann’s random number generator (also known as Middle-square method).

This algorithm is a simple method of generating short sequences of four-digit random integers. The method has its drawbacks, but for us, it is an interesting algorithmic task. The recipe has these steps:

1. Take a number between 0 and 9999.
2. Calculate the square of it.
3. If necessary, add leading zeros to make the number 8-digit.
4. Take the middle four digits.
5. Repeat from step 2.

To illustrate it with an example, let’s take the number 1234 as the seed. On step 2, it becomes 1522756; after step 3, 01522756. Finally, step 4 extracts the number 5227.
::
#include "../asteroid/test-suites/action-tests/test039.ast"

Output:
::

    5227


Challenge: Histogram of random numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Test the quality of the random generator by using a histogram to visualise the distribution.

The quality of the built-in generator of random numbers fully depends on the algorithm the developers of the compiler used. As a user, you cannot do much to change the existing generator, but you can always test if it delivers numbers uniformly distributed across the whole interval.

In our solution, we generate 10 random integers between 0 and 9. We then count how many times each of the integers have been generated.  If it is a decent random number generator, all numbers should have been generated roughly an equal number of times.
::
#include "../asteroid/test-suites/action-tests/test040.ast"

Output:
::

    [944,1032,1015,968,981,986,1014,1058,989,1013]


Section: Mathematical Problems
------------------------------

Challenge: Distance between two points
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Calculate the distance between the two points on a surface.

There are two points on a surface, each with their own coordinates, x and y. The task is to find the distance between these two points.
A straightforward solution would be to use the Pythagorean theorem:
::
#include "../asteroid/test-suites/action-tests/test041.ast"

Output:
::

    2.23606797749979


Another approach is using the math identity,
::

    ||a|| = sqrt(a . a)


where ``.`` represents the dot product. In our case ``a`` would be the distance vector between points ``x`` and ``y``,
::
#include "../asteroid/test-suites/action-tests/test042.ast"

Output:
::

    2.23606797749979


The interesting part about the second approach is that it is completely dimension independent.  Note that except for the definition of the vectors $x$ and $y$ dimension never plays a part in the definition of the program.

Challenge: Standard deviation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> For the given data, calculate the standard deviation value (sigma).

Standard deviation is a statistical term that shows how compact data distribution is. The formula is the following:

.. math::

    \sigma = \sqrt\frac{1}{n-1}\sum_i(\bar{x} - x_i)^2

where :math:`n` is the number of elements in the array :math:`x`; :math:`\bar{x}` is its average value (**Challenge: Average on an array**).
::
#include "../asteroid/test-suites/action-tests/test043.ast"

Output:
::

    420.96248961952256


Challenge: Polar coordinates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Convert the Cartesian coordinates to polar and backward.

Polar coordinates are a convenient way of representing points on a surface with the two values: distance from the centre of coordinates, and the angle between the vector and the pole axis.
The conversion formulae between the Cartesian and polar systems, which is valid for **positive** ``x`` and ``y``, are the following:
::

    x = r cos(psi)
    y = r sin(psi)
    r = sqrt(x^2 + y^2)
    psi = arctan(x/y)

These expressions can be implemented as-is in the code:
::
#include "../asteroid/test-suites/action-tests/test044.ast"

Output:
::

    (1.0000000000000002,2.0)


For the **negative** ``x`` and ``y``, the Cartesian-to-polar conversion is a bit more complicated. Depending on the quadrant of the point, the ``psi`` value is bigger
or smaller than ``pi``. When ``x`` is zero, it is either ``-pi/2`` or ``pi/2``.
All these variants can be implemented by using ``with`` clauses and conditional matching, as demonstrated below:
::
#include "../asteroid/test-suites/action-tests/test045.ast"

Output:
::

    (-2.999999999999999,5.000000000000001)


Challenge: Monte Carlo method
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Calculate the area of a circle of radius 1 using the Monte Carlo method.

The Monte Carlo method is a statistical method of calculating data whose formula is not known. The idea is to generate a big number of random numbers and see how many of them satisfy the condition.

To calculate the area of a circle with a radius of 1, pairs of random numbers between −1 and 1 are generated. These pairs represent the points in the square in the center of coordinates with sides of length 2. The area of the square is thus 4. If the distance between the random point and the center of the square is less than 1, then this point is located inside the circle of that radius. Counting the number of points that landed inside the circle and the number of points outside the circle gives the approximate value of the area of the circle, as soon as the area of the square is known. Here is the program.
::
#include "../asteroid/test-suites/action-tests/test046.ast"

Output:
::

    3.1392


Challenge: Guess the number
^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Write a program that generates a random integer number between 0 and 10, asks the user to guess it, and says if the entered value is too small or too big.

First, a random number needs to be generated. Then the program must
ask for the initial guess and enter the loop, which compares the guess with the generated number.
::
#include "../asteroid/test-suites/action-tests/test047.ast"

Challenge: Binary to integer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Convert a binary number to a decimal integer.

In Asteroid this is straightforward using the built-in ``tointeger`` function, passing it a string representation of the binary number and the base.
::
#include "../asteroid/test-suites/action-tests/test048.ast"

Output:
::

    45


Challenge: Integer as binary, octal, and hex
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print a given integer number in the binary, octal, and hexadecimal representations.

In Asteroid this is easily done with the ``tobase`` function.
::
#include "../asteroid/test-suites/action-tests/test049.ast"

Output:
::

    101010
    52
    2A


Challenge: Sum of digits
^^^^^^^^^^^^^^^^^^^^^^^^

> Calculate the sum of digits of a given number.

Pretty straightforward using string and list manipulation.
::
#include "../asteroid/test-suites/action-tests/test050.ast"

Output:
::

    49


Challenge: Bit counter
^^^^^^^^^^^^^^^^^^^^^^

> Count the number of bits set to 1 in a binary representation of a positive integer number.

If we remove all the zeros from a binary number, then we are left with only ``1`` characters which we can then count.
::
#include "../asteroid/test-suites/action-tests/test051.ast"

Output:
::

    4


Challenge: Compose the largest number
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Given the list of integers, compose the largest possible number by concatenating them.

The easiest way to achieve that is to treat the numbers as strings, sort them alphabetically in descending order, concatenate the pieces to a single string, and get the resulting integer.
::
#include "../asteroid/test-suites/action-tests/test052.ast"

Output:
::

    8675451


Challenge: Convert to Roman numerals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Convert an integer number to a Roman numerals string.

Roman numbers are not a direct translation of the decimal system. In this task, we assume that the number is not more than 3999, which is the maximum a regular Roman number can reach.

Let’s use the algorithm that keeps the table of pre-calculated sequences of Roman letters. This is so that we don’t have to check when III becomes IV, or when another I appears after V, etc.

In the program below, there are four such sequences: for thousands, hundreds, tens, and ones. The program iterates over the digits of the number in the decimal representation and chooses one of the values from the array of lists stored in the ``roman_hash`` table.
::
#include "../asteroid/test-suites/action-tests/test053.ast"

Output:
::

    [(2,1000),(0,100),(1,10),(8,1)]
    MMXVIII


Challenge: Spelling numbers
^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Write an integer number below one million in words.

Human languages have many inconsistencies, especially in the most frequent constructs. Spelling numbers seems to be a simple task, but due to a number of small differences, the resulting program is quite big.

The program is listed on the next page. Let’s discuss the algorithm first.

Take a number; for example, 987,654. The rules for spelling out the groups of three digits, 987 and 654, are the same. For the first group, the word thousand must be added.

Now, examine a group of three digits. The first digit is the number of hundreds, and it has to be spelled only if it is not zero. If it is not zero, then we spell the digit and add the word hundred.

Now, remove the leftmost digit, and we’ve got two digits left. If the remaining two digits form the number from 1 to 20, then it can be directly converted to the corresponding name. The names for the numbers from 0 to 10 are obviously different. The names for the numbers from 11 to 19 have some commonalities, but is it still easier to directly prepare the names for all of them.

For the larger numbers (21 to 99), there are two cases. If the number is dividable by 10 then a name for 20, 30, 40, etc. is taken. If not, then the name is built of the name of tens and the name for units, joined with a hyphen, such as forty-five.

The zero name appears only in the case when the given number is zero.
::
#include "../asteroid/test-suites/action-tests/test054.ast"

Output:
::

    fifteen
    seventy-five
    nine hundred eighty-seven thousand six hundred fifty-four
    one thousand one


Section: Manipulating Lists and Arrays
--------------------------------------

Challenge: Swap two values
^^^^^^^^^^^^^^^^^^^^^^^^^^

> Swap the values of two variables.

In Asteroid, there is no need to use temporary variables to swap the values of two variables. Just use tuples on both sides of the equation:
::

    let (b,a) = (a,b).

Consider the complete program:
::
#include "../asteroid/test-suites/action-tests/test055.ast"

Output:
::

    (a = 20,b = 10)


This program prints the swapped values:
::

    (a = 20,b = 10)

This approach also works with elements of an array:
::
#include "../asteroid/test-suites/action-tests/test056.ast"

Output:
::

    [3,5,4,7]


Challenge: Reverse a list
^^^^^^^^^^^^^^^^^^^^^^^^^

> Print the given list in reverse order.
::
#include "../asteroid/test-suites/action-tests/test057.ast"

Output:
::

    [50,40,30,20,10]


Challenge: Rotate a list
^^^^^^^^^^^^^^^^^^^^^^^^

> Move all elements of an array N positions to the left or to the right.

Asteroid does not have a built-in ``rotate`` function. However, such a function is easily constructed through slicing lists (see ``vix`` below).
::
#include "../asteroid/test-suites/action-tests/test058.ast"

Output:
::

    [1,3,5,7,9,11,13,15]
    [7,9,11,13,15,1,3,5]
    [11,13,15,1,3,5,7,9]


Challenge: Randomize an array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Shuffle the elements of an array in random order.

This is easily accomplished with the built-in ``shuffle``.
::
#include "../asteroid/test-suites/action-tests/test059.ast"

Output:
::

    [20,6,15,5,10,14,16,19,7,13,18,11,2,12,3,17,8,9,1,4]


Challenge: Incrementing array elements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Increment each element in an array.

For this we use Asteroid's ``vector`` module, which can handle incrementing a vector with a scalar.
::
#include "../asteroid/test-suites/action-tests/test060.ast"

Output:
::

    [2,3,4,5,6,7,8,9,10,11]


Challenge: Adding up two arrays
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Take two arrays and create a new one whose elements are the sums of the corresponding items of the initial arrays.

Again, here we take advantage of Asteroid's ``vector`` module.  Note that the two vectors have to be of the same length in order to add them together.
::
#include "../asteroid/test-suites/action-tests/test061.ast"

Output:
::

    [40,42,44,46,48,50,52,54,56,58,60]


The vector module defines a function called ``op`` that allows you to combine two vectors using any arbitrary binary function.  Rewriting the above program using ``op``,
::
#include "../asteroid/test-suites/action-tests/test062.ast"

Output:
::

    [40,42,44,46,48,50,52,54,56,58,60]


As we said above, any arbitrary binary function. Consider the relational operator ``<`` expressed as a lambda function,
::
#include "../asteroid/test-suites/action-tests/test063.ast"

Output:
::

    [false,true,false,false,false,true,false,false,true,true]


Challenge: Exclusion of two arrays
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> From the given two arrays, find the elements of the first array which do not
appear in the second one.

Here we use Asteroid's ``set`` module.
::
#include "../asteroid/test-suites/action-tests/test064.ast"

Output:
::

    [2,3,1,4]


Section: Information Retrieval
------------------------------

Challenge: Sum of the elements of an array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the sum of the elements of an array of integers.
::
#include "../asteroid/test-suites/action-tests/test065.ast"

Output:
::

    125


If summing up elements that are greater than 10,
::
#include "../asteroid/test-suites/action-tests/test066.ast"

Output:
::

    92


Challenge: Average of an array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the average value of the given array of numbers.
::
#include "../asteroid/test-suites/action-tests/test067.ast"

Output:
::

    60


Challenge: Is an element in a list?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Tell if the given value is in the list.
::
#include "../asteroid/test-suites/action-tests/test069.ast"

Output:
::

    17 is in the list


We can also use a reduction function to solve this,
::
#include "../asteroid/test-suites/action-tests/test070.ast"

Output:
::

    17 is in the list


Challenge: First odd number
^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the first odd number in a list of integers.

The easiest way to do this is with a reduction,
::
#include "../asteroid/test-suites/action-tests/test071.ast"

Output:
::

    9


Challenge: Take every second element
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Form a new array by picking every second element from the original array.
::
#include "../asteroid/test-suites/action-tests/test072.ast"

Output:
::

    [21,23,25,27,29]


We can use an index vector to accomplish  the same thing,
::
#include "../asteroid/test-suites/action-tests/test073.ast"

Output:
::

    [21,23,25,27,29]


Challenge: Number of occurrences in an array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Count how many times a particular element appears in the array.
::
#include "../asteroid/test-suites/action-tests/test074.ast"

Output:
::

    2


Challenge: Finding unique elements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Print all unique elements of the given array.

Converting a list to a set will remove all duplicate elements in the list.
::
#include "../asteroid/test-suites/action-tests/test075.ast"

Output:
::

    [2,3,4,5,6,7,10]


Challenge: Minimum and maximum
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Find the minimum and the maximum numbers in the given list of integers.
::
#include "../asteroid/test-suites/action-tests/test076.ast"

Output:
::

    15
    2


Challenge: Increasing sequences
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Check if the given array contains increasing (or decreasing) numbers.
::
#include "../asteroid/test-suites/action-tests/test077.ast"

Output:
::

    true

Section: Multi-Dimensional Data
-------------------------------

Challenge: Transpose a matrix
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Take a matrix and print its transposed version.

In Asteroid a matrix can be represented by nested lists, like so,
::

    let m = [[1,2],
             [3,4]].

The transpose of this matrix is,
::

    let m = [[1,3],
             [2,4]].

In a square matrix computing the transpose is just a matter of swapping around the elements.  However, here we will solve the more general problem for non-square matrices,
::

    let m = [[1,2],
             [3,4],
             [5,6]].

with its transpose,
::

    let m = [[1,3,5],
             [2,4,6]].

The procedure:
::
#include "../asteroid/test-suites/action-tests/test078.ast"

Output:
::

    The transpose of:

    1 2
    3 4

    is:

    1 3
    2 4


    The transpose of:

    1 2
    3 4
    5 6

    is:

    1 3 5
    2 4 6


Challenge: Sort hashes by parameter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> Sort a list of hashes using data in their values.

This task is commonly performed to sort items where the sortable parameter is one of the values in the hash. For example, sorting a list of people by age.
::
#include "../asteroid/test-suites/action-tests/test079.ast"

Output:
::

    [(Pete,20),(Joe,23),(Billie,40),(Brandi,43)]


Challenge: Count hash values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

> For a given hash, count the number of occurrences of each of its values.

For example, a hash is a collection mapping a car’s license plate to the colour of the car or a passport number to the name of the street where the person lives. In the first example, the task is to count how many cars of each colour there are. In the second example, we have to say how many people live on each street. But let’s simply count the colours of fruit.
::
#include "../asteroid/test-suites/action-tests/test080.ast"

Output:
::

    [(red,1),(purple,1),(yellow,2),(orange,2),(green,4)]


Challenge: Product table
^^^^^^^^^^^^^^^^^^^^^^^^

> Generate and print the product table for the values from 1 to 10.

We will do this with an outer loop  and a ``map`` function.
::
#include "../asteroid/test-suites/action-tests/test081.ast"

Output:
::

      1   2   3   4   5   6   7   8   9  10
      2   4   6   8  10  12  14  16  18  20
      3   6   9  12  15  18  21  24  27  30
      4   8  12  16  20  24  28  32  36  40
      5  10  15  20  25  30  35  40  45  50
      6  12  18  24  30  36  42  48  54  60
      7  14  21  28  35  42  49  56  63  70
      8  16  24  32  40  48  56  64  72  80
      9  18  27  36  45  54  63  72  81  90
     10  20  30  40  50  60  70  80  90 100


Challenge: Pascal triangle
^^^^^^^^^^^^^^^^^^^^^^^^^^

> Generate the numbers of the Pascal triangle and print them.

The Pascal triangle is a sequence of rows of integers. It starts with a single 1 on the top row, and each following row has one number more, starting and ending with 1, while all of the other items are the sums of the two elements above it in the previous row. It is quite obvious from the illustration:
::

           1
          1 1
         1 2 1
        1 3 3 1
       1 4 6 4 1
     1 5 10 10 5 1
    1 6 15 20 15 6 1

To calculate the values of the next row, you may want to iterate over the values of the current row and make the sums with the numbers next to it. Let us use the functional style that the language offers.
Consider the fourth row, for example: 1 3 3 1. To make the fifth row, you can shift all the values by one position to the right and add them up to the current row:
::

      13310
    + 01331
    -------
    14641

We can easily accomplish this with our ``vector`` module. Given the vector of the fourth row,
::

    [1,3,3,1]

we create two new vectors,
::

    [1,3,3,1,0]

and
::

    [0,1,3,3,1]

We then add them together,
::

    vector @add([1,3,3,1,0],[0,1,3,3,1]) = [1,4,6,4,1]

The only thing that is left to do is to iterate appropiately and format the output.
::
#include "../asteroid/test-suites/action-tests/test082.ast"

Output:
::

    1
    1 1
    1 2 1
    1 3 3 1
    1 4 6 4 1
    1 5 10 10 5 1
    1 6 15 20 15 6 1


The program prints the first seven rows of the Pascal triangle. The rows are not centred, and are aligned to the left side.
As an extra exercise, modify the program so that it prints the triangle as it is shown at the beginning of this task. For example, you can first generate rows and keep them in a separate array and then, knowing the length of the longest string, add some spaces in front of the rows before printing them.
