/**************************************************************************************
 Grammar for Asteroid written in EBNF/PEG format.
 (c) University of Rhode Island

 Notes:
 - We generate documentation directly from this grammar file.  In order to
   be properly formatted in the target documentation please respect the
   indentation given below.
 - Use C++ style comments for any comments that you DO want to be displayed
   in the target documentation.
 - C style comments for any comments that you DO NOT want to be displayed
   in the target documentation -- like the one you are reading right now...
 **************************************************************************************/
  ////////////////////////////////////////////////////////////////////////////////////////
  // statements

  prog
    : stmt_list

  stmt_list
    : stmt*

  stmt
    : '.' // NOOP
    | LOAD SYSTEM? (STRING | ID) '.'?
    | GLOBAL id_list '.'?
    | ASSERT exp '.'?
    | STRUCTURE ID WITH struct_stmts END
    | LET pattern '=' exp '.'?
    | LOOP DO? stmt_list END
    | FOR pattern IN exp DO stmt_list END
    | WHILE exp DO stmt_list END
    | REPEAT DO? stmt_list UNTIL exp '.'?
    | IF exp DO stmt_list (ELIF exp DO stmt_list)* (ELSE DO? stmt_list)? END
    | TRY DO? stmt_list (CATCH pattern DO stmt_list)+ END
    | THROW exp '.'?
    | BREAK '.'?
    | RETURN exp? '.'?
    | function_def
    | exp '.'?

  function_def
    : FUNCTION ID body_defs END

  body_defs
    : WITH pattern DO stmt_list (WITH pattern DO stmt_list)*

  data_stmt
    : DATA ID

  struct_stmt
    : data_stmt  '.'?
    | function_def '.'?
    | '.'

  struct_stmts
    : struct_stmt*

  id_list
    : ID (',' ID)*

  ////////////////////////////////////////////////////////////////////////////////////////
  // expressions/patterns
  /*
   NOTE: There is no syntactic difference between a pattern
   and an expression. We introduce the 'pattern' nonterminal
   to highlight the SEMANTIC difference between patterns and
   expressions.
  */
  exp
    : pattern

  pattern
    : PATTERN WITH? exp
    | '%[' exp ']%' binding_list?    /* constraint-only pattern match */
    | head_tail

  head_tail
    : conditional ('|' exp)?

  /*
   conditional patterns are now supported via 'pattern if cond'
   no else part. Since this overlaps with conditional expressions
   we check for correct usage semantically.
  */
  conditional
    : compound (IF exp (ELSE exp)?)?

  compound
    : logic_exp0
        (
           (IS pattern) |
           (IN exp) |               /* exp has to be a list */
           (TO exp (STEP exp)?) |   /* list comprehension */
        )?

  logic_exp0
    : logic_exp1 (OR logic_exp1)*

  logic_exp1
    : rel_exp0 (AND rel_exp0)*

  rel_exp0
    : rel_exp1 (('==' | '=/=' ) rel_exp1)*

  rel_exp1
    : arith_exp0 (('<=' | '<'  | '>=' | '>') arith_exp0)*

  arith_exp0
    : arith_exp1 (('+' | '-') arith_exp1)*

  arith_exp1
    : call_or_index (('*' | '/') call_or_index)*

  call_or_index
    : primary (primary | '@' primary)* (':' pattern)?  /* named pattern when ': pattern' exists */

  ////////////////////////////////////////////////////////////////////////////////////////
  // primary expressions/patterns

  primary
    : INTEGER
    | REAL
    | STRING
    | TRUE
    | FALSE
    | NONE
    | ID
    | '*' call_or_index  binding_list? /* pattern dereferencing */
    | NOT call_or_index
    | MINUS call_or_index
    | PLUS call_or_index
    | ESCAPE STRING
    | EVAL primary
    | '(' tuple_stuff ')' /* tuple/parenthesized expr */
    | '[' list_stuff ']'  /* list or list access */
    | function_const
    | TYPEMATCH           // TYPEMATCH == '%'<typename>

/* Note: binding lists are only supported for constraint patterns */

  binding_list
    : BIND binding_list_suffix
    
  binding_list_suffix
     : binding_term
     | '[' binding_term (',' binding_term)* ']'

  binding_term
    : ID (AS ID)?

  tuple_stuff
    : exp (',' exp?)*
    | empty

  list_stuff
    : exp (',' exp)*
    | empty

  function_const
    : LAMBDA body_defs
