
load system io.
load system util.


-----------------------------------------------------------------------
let x = [1,2].
let %[ x ]% = (2,1).
assert( x == [1,2] ).
-----------------------------------------------------------------------
let %[ ( a , b ) ]% = (1,2).
try
  assert(a == 1).

  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("not defined")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
try
  assert(b == 2).

  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("not defined")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------
let ( one , %[ two ]% ) = (1,2).
assert(one == 1).
try
  assert(two == 2).

  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("not defined")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------
let POS_INT = pattern with (p:%integer) if p > 0.

-- using the POS_INT pattern as a constraint not generating any unifiers
function f with (x:%[*POS_INT]%,y:%[*POS_INT]%) do
  return x+y.
end

-- using the POS_INT pattern in the traditional sense
function g with *POS_INT do
  return 2*p.
end

assert (f(1,2) == 3).
assert (g(1) == 2).
-----------------------------------------------------------------------
-- the POS_INT pattern is just a constraint, no unifiers are exported.
let POS_INT = pattern with %[(p:%integer) if p > 0]%.

function f with (x:*POS_INT,y:*POS_INT) do
  return x+y.
end

function g with p:*POS_INT do
  return 2*p.
end

assert (f(1,2) == 3).
assert (g(1) == 2).
-----------------------------------------------------------------------
let %[ x:%integer ]% = 1.
-----------------------------------------------------------------------
let %[ ( one , %[ two ]% ) ]% = (1,2).
-----------------------------------------------------------------------
try
  let v = 1 if v == 2.
  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("'else' clause")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------
try
  let v = 1%integer.
  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("constraint")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------
try
  let v = %[ 1 ]%.
  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("constraint")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------
try
  let POS_INT = pattern with %[(number:%integer) if number > 0]%.

  function g with *POS_INT do
    return 2*number. -- error: no unifier for 'number'
  end.
  assert(20 == g(10)).

  throw Error("FAIL: no expected error ").
catch Exception("SystemError", s) do
  if not isnone(s @index("not defined")) do
  . -- pass
  else
    throw Error("FAIL: unexpected error "+s).
  end.
end.
-----------------------------------------------------------------------

io @println("PASSED.").
