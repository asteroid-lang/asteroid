load system io.
load system math.

-- Math library revision test 6/18/2023 ttc

let failures = 0.
let EXPECTED = pattern with Exception( "SystemError" , _ ).

--                                      **********************
--                                      **** Constants    ****
--                                      **********************
let x = math@ pi.
let y = math@ tau.
assert( math@isclose( (2.0*x) ,y)  ). -- assert tau is correct value

--                                      **********************
--                                      **** Combinations ****
--                                      **********************
assert( math@comb(10,7) == 120 ). 
assert( math@comb(10,5) == 252 ).
assert( math@comb(7,5) == 21 ).
assert( math@comb(5,7) == 0 ).
assert( math@comb(0,7) == 0 ).

try
    math@comb(-1,7).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@comb(10.2,7).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** Permutations ****
--                                      **********************
assert( math@perm(10,7) == 604800 ). 
assert( math@perm(10,5) == 30240 ).
assert( math@perm(7,5) == 2520 ).
assert( math@perm(5,7) == 0 ).
assert( math@perm(0,7) == 0 ).

try
    math@perm(-1,7).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@perm(10.3,7).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** isqrt        ****
--                                      **********************
assert( math@isqrt(16) == 4 ).
assert( math@isqrt(17) == 4 ).
assert( math@isqrt(18) == 4 ).
assert( math@isqrt(20) == 4 ).
assert( math@isqrt(4) == 2 ).
assert( math@isqrt(5) == 2 ).
assert( math@isqrt(101) == 10 ).
assert( math@isqrt(150) == 12 ).

try
    math@isqrt(-1.1).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@isqrt("hello").
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** ldexp        ****
--                                      **********************
assert( math@isclose( math@ldexp(7,7) , 896.0 )).
assert( math@isclose( math@ldexp(-4,12) , -16384.0 )).
assert( math@isclose( math@ldexp(11,-3) , 11.0/8.0 )).
assert( math@isclose( math@ldexp(9,8) , 2304.0 )).

try
    mathldexp("hello",7).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@ldexp(7,"hello").
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** prod         ****
--                                      **********************
assert( math@prod( [1,2,3,4,5] ) == 120 ).
assert( math@prod( (1,2,3,4,5) ) == 120 ).
assert( math@prod( [-2,-2,-2,-2] ) == 16 ).
assert( math@prod( [-2,-2,-2,-2,-2] ) == -32 ).
assert( math@isclose( math@prod(12.3,100.01,14.56,9.5) , 170150.61336) ).
assert( math@prod( [1,2,3,4,5] ) == math@prod( (5,4,3,2,1) ) ).

try
    math@prod( ["h","e","l","l","o"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@prod( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** sum          ****
--                                      **********************
assert( math@sum( [1,2,3,4,5] ) == 15 ).
assert( math@sum( (1,2,3,4,5) ) == 15 ).
assert( math@sum( [-2,-2,-2,-2] ) == -8 ).
assert( math@sum( [-2,-2,-2,-2,-2] ) == -10 ).
assert( math@isclose(  math@sum( (12.3,100.01,14.56,9.5) ) , 136.37) ).
assert( math@sum( [1,2,3,4,5] ) == math@sum( (5,4,3,2,1) ) ).

try
    math@sum( ["h","e","l","l","o"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@sum( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
--                                      **********************
--                                      **** fsum         ****
--                                      **********************
assert( math@isclose( math@fsum( [0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1] ) , 1.0 )).
assert( math@isclose( math@fsum( (1.0/5.0,1.0/5.0,1.0/5.0,1.0/5.0,1.0/5.0) ) , 1.0 )).

try
    math@fsum( ["h","e","l","l","o"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@fsum( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
--                                      **********************
--                                      **** lcm          ****
--                                      **********************
assert( math@lcm(4,5) == 20 ).
assert( math@lcm(5,4) == 20 ).
assert( math@lcm(6,8) == 24 ).
assert( math@lcm(13,17) == 221 ).
assert( math@lcm(101,117) == 11817 ).

try
    math@lcm( "a",12 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@lcm( 33,"b" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
--                                      **********************
--                                      **** copysign     ****
--                                      **********************
assert( math@isclose( math@copysign(1.1,2.2) , 1.1 )).
assert( math@isclose( math@copysign(1,2) , 1 )).
assert( math@isclose( math@copysign(1.1,-2.2), -1.1 )).
assert( math@isclose( math@copysign(1,-2) , -1 )).
assert( math@isclose( math@copysign(-1.1,2.2) , 1.1 )).
assert( math@isclose( math@copysign(-1,2) , 1 )).
assert( math@isclose(  math@copysign(-1.1,-2.2) , -1.1 )).
assert( math@isclose( math@copysign(-1,-2) , -1 )).

try
    math@copysign( "a",-12 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@copysign( 33,"b" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
--                                      **********************
--                                      **** factorial    ****
--                                      **********************
assert( math@factorial(1) == 1 ).
assert( math@factorial(0) == 1 ).
assert( math@factorial(10) == 3628800 ).
assert( math@factorial(5) == 120 ).
assert( math@factorial(12) == 479001600 ).
assert( math@factorial(3) == 6 ).

try
    math@copysign( 10.23 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@copysign( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
--                                      **********************
--                                      **** trunc        ****
--                                      **********************
assert( math@trunc(1.00000001) == 1 ).
assert( math@trunc(1.99999999) == 1 ).
assert( math@trunc(-1.00000001) == -1 ).
assert( math@trunc(-1.99999999) == -1 ).

try
    math@trunc( 5 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@trunc( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** fmod         ****
--                                      **********************
assert( math@fmod(12,10) == 2 ).
assert( math@fmod(-12,10) == -2 ).
assert( math@fmod(123,5) == 3 ).
assert( math@fmod(-123,5) == -3 ).

try
    math@fmod( 5.5,100 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@fmod( "hello",100 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** atan2        ****
--                                      **********************
assert( math@isclose( math@atan2(12,10) , 0.8760580505981934) ).
assert( math@isclose( math@atan2(0.5,1.666) , 0.29156692663601214) ).
assert( math@isclose( math@atan2(-0.9,4.001) , -0.22126091552495672) ).
assert( math@isclose( math@atan2(-1,-1) , -2.35619449019234484) ).

try
    math@atan2( 5.5,"hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@atan2( "hello",100 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** remainder    ****
--                                      **********************
assert( math@isclose( math@remainder(12,10) , 2.0 )).
assert( math@isclose( math@remainder(2,2) , 0.0 )).
assert( math@isclose( math@remainder(2,4) , 2.0 )).
assert( math@isclose( math@remainder(2,0.5) , 0.0 )).
assert( math@isclose( math@remainder(0.5,0.11) , -0.05 )).

try
    math@remainder( 5.5,"hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@remainder( "hello",100 ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** expm1        ****
--                                      **********************
assert( math@isclose( math@expm1(0) , 0.0 )).
assert( math@isclose( math@expm1(1) , 1.718281828459045 )).
assert( math@isclose( math@expm1(2) , 6.38905609893065 )).
assert( math@isclose( math@expm1(2.1) , 7.16616991256765 )).
assert( math@isclose( math@expm1(-1.1) , -0.6671289163019205 )).

try
    math@expm1( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@expm1( ["hello"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** log2         ****
--                                      **********************
assert( math@isclose( math@log2(4) , 2.0 )).
assert( math@isclose( math@log2(16) , 4.0 )).
assert( math@isclose( math@log2(1024.0) , 10.0 )).
assert( math@isclose( math@log2(2.1) , 1.070389327891398 )).

try
    math@log2( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@log2( ["hello"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** log10        ****
--                                      **********************
assert( math@isclose( math@log10(10) , 1.0 )).
assert( math@isclose( math@log10(100) , 2.0 )).
assert( math@isclose( math@log10(1000.0) , 3.0 )).
assert( math@isclose( math@log10(200.1) , 2.3012470886362113 )).

try
    math@log10( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@log10( ["hello"] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** dist         ****
--                                      **********************
assert( math@isclose( math@dist( (1,1) , (1,2) ) , 1.0 )).
assert( math@isclose( math@dist( (1,1) , (2,1) ) , 1.0 )).
assert( math@isclose( math@dist((2,3,4,5,6),(6,7,3,4,5)) , 5.916079783099616 )).
assert( math@isclose( math@dist((1,1),(100,175)) , 200.19240744843447 )).

try
    math@dist( "hello","world" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@dist( (1,1), (1,2,3) ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** hypot        ****
--                                      **********************
assert( math@isclose( math@hypot( 3 , 4 ) , 5.0) ).
assert( math@isclose( math@hypot( 1 , 1 ) , math@sqrt(2) )).
assert( math@isclose( math@hypot( 5 , 5 ) , math@sqrt(50) )).
assert( math@isclose(math@hypot( 8 , 15 ) , 17.0 )).
assert( math@isclose( math@hypot( 13 , 17 ) , math@sqrt( math@pow(13,2) + math@pow(17,2)) )).

try
    math@hypot( "hello","world" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@hypot( [1,2,3], (1,2,3) ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** error        ****
--                                      **********************
assert( math@isclose( math@erf( 1.1 ) , 0.8802050695740817 )).
assert( math@isclose( math@erf( -1.1 ) , -0.8802050695740817 )).
assert( math@isclose( math@erf( 10 ) , 1.0 )).
assert( math@isclose( math@erf( 0.13333 ) , 0.1495600366981686 )).

try
    math@erf( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@erf( [1,2,3] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** errorc       ****
--                                      **********************
assert( math@isclose( math@erfc( 1.1 ) , 0.11979493042591827 )).
assert( math@isclose( math@erfc( -1.1 ) , 1.8802050695740817 )).
assert( math@isclose( math@erfc( 10 ) , 2.088487583762545e-45 )).
assert( math@isclose( math@erfc( 0.13333 ) , 0.8504399633018314 )).

try
    math@erfc( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@erfc( [1,2,3] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** gamma        ****
--                                      **********************
assert( math@isclose( math@gamma( 1.1 ) , 0.951350769866873 )).
assert( math@isclose( math@gamma( -1.1 ) , 9.714806382902898 )).
assert( math@isclose( math@gamma( 10 ) , 362880.0 )).
assert( math@isclose( math@gamma( 0.13333 ) , 7.0407639878879245 )).

try
    math@gamma( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@gamma( [1,2,3] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

--                                      **********************
--                                      **** lgamma       ****
--                                      **********************
assert( math@isclose( math@lgamma( 1.1 ) , -0.04987244125984036 )).
assert( math@isclose( math@lgamma( -1.1 ) , 2.273651152924464 )).
assert( math@isclose( math@lgamma( 10 ) , 12.801827480081467 )).
assert( math@isclose( math@lgamma( 0.13333 ) , 1.9517166852887797 )).

try
    math@lgamma( "hello" ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end
try
    math@lgamma( [1,2,3] ).
    let failures = failures + 1.
catch *EXPECTED do
    . --pass
end

---------------------------------------------------------------
assert( failures == 0 ).
io @println "Pass".