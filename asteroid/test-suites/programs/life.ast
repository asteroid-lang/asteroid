-- conway's game of life written in Asteroid
-- written by Lutz Hamel, (c) University of Rhode Island

load system io.
load system util.
load system random.

# number of generations to play
let n_gen = 20.

--------------------------------------------------------------------------
function display_array
    -- display the contents of an array, wait for .5sec
    with ar do

        let nrows = len(ar).    -- grab the rows
        if nrows is 0 do
            throw Error "Array contains no data".
        end

        let ncols = len(ar@0). -- grab the cols

        for i in 0 to (nrows-1) do
            let row_str = "".
            for j in 0 to (ncols-1) do
                let row_str = row_str + ar@i@j.
            end
            io @println row_str.
        end
    end

--------------------------------------------------------------------------
function array_shape
    with arr do
        let xdim = len(arr).
        let ydim = len(arr@0).
        return (xdim, ydim)
    end

--------------------------------------------------------------------------
function compute_new_state
    -- Compute a new map2 from an old map1
    with (map1, map2) do

        let (xdim,ydim) = array_shape map1.

        -- compute our new map
        for x in 0 to (xdim-1) do
            for y in 0 to (ydim-1) do
                -- probe the map and count the neighbors
                let ct = 0.
                let ct = (ct + map1@(x-1)@(y-1)) if (x-1 >= 0   and y-1 >= 0)  else 0.
                let ct = (ct + map1@(x)@(y-1))   if (               y-1 >= 0)  else 0.
                let ct = (ct + map1@(x+1)@(y-1)) if (x+1 < xdim and y-1 >= 0)  else 0.
                let ct = (ct + map1@(x+1)@(y))   if (x+1 < xdim             )  else 0.
                let ct = (ct + map1@(x+1)@(y+1)) if (x+1 < xdim and y+1 < ydim) else 0.
                let ct = (ct + map1@(x)@(y+1))   if (               y+1 < ydim) else 0.
                let ct = (ct + map1@(x-1)@(y+1)) if (x-1 >= 0   and y+1 < ydim) else 0.
                let ct = (ct + map1@(x-1)@(y))   if (x-1 >= 0                 ) else 0.

                -- update the output map
                -- element is alive
                if map1@x@y==1 and ct>1 and ct<4 do
                    let map2@x@y = 1.
                else do
                    let map2@x@y = 0.
                end

                -- element is dead
                if map1@x@y==0 and ct==3 do
                    let map2@x@y = 1.
                end
            end -- for
        end -- for
    end -- function

--------------------------------------------------------------------------
function show_map
    -- Display our map to the terminal using asterisk for live cells
    -- and space for dead ones.
    with map do

        let (xdim,ydim) = array_shape map.

        -- need to do a deep copy because we are modifying the map
        let display_map = util @copy map.

        for x in 0 to (xdim-1) do
            for y in 0 to (ydim-1) do
                if display_map@x@y > 0 do
                    let display_map@x@y = "*".
                else do
                    let display_map@x@y = " ".
                end
            end
        end

        display_array display_map.

    end

--------------------------------------------------------------------------
function init_map
    with (xdim, ydim) do

        let thresh = 0.8.
        let map = [].

        -- NOTE: y horizontal, x vertical - this was ported from Perl and there
        --       got stuck this way...
        for x in 0 to (xdim-1) do
            let row = [].
            for y in 0 to (ydim-1) do
                let v = 1 if random @random() > thresh else 0.
                let row = row + [v]
            end
            let map = map + [row]
        end

        return map
    end

--------------------------------------------------------------------------
function life
    with (maxgen, xdim, ydim) do

        -- create memory for both maps
        let map1 = init_map(xdim, ydim).
        let map2 = init_map(xdim, ydim).

        -- show the initial map
        util @cls().
        io @println "initial map".
        show_map map1.

        for gen in 0 to (maxgen-1) do
            compute_new_state(map1, map2).
            util @cls().
            io @println("map @ generation " + tostring gen).
            show_map(map2).
            -- implement double buffering
            let (map1,map2) = (map2,map1). -- swap the maps
        end

    end

--------------------------------------------------------------------------
-- run it!
life(n_gen, 20, 30).
