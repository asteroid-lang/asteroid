load system io.
load system type.

structure Dog with
  data name.
  data tricks. -- list of trick strings
end

let fido = Dog ("Fido",["play dead","fetch"]).
let buddy = Dog ("Buddy",["sit stay","roll over"]).

-- print out all the dogs that know how to fetch
-- we do this with first class pattern defines a dog 
-- that knows how to fetch, we use regular expression 
-- matching on the trick list
let fetcher = pattern %[(Dog(name,tricks) 
                          if type @tostring tricks is ".*fetch.*")]%.

-- one way to do this
for (Dog(name,tricks) if Dog(name,tricks) is *fetcher) in [fido,buddy] do
    io @println (name+" knows how to fetch").
end

-- another way to do this
for ((d:Dog(name,tricks)) if d is *fetcher) in [fido,buddy] do
    io @println (name+" knows how to fetch").
end

-- yet another way of doing this
for (*fetcher bind name) in [fido,buddy] do
    io @println (name+" knows how to fetch").
end


