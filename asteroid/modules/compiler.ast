------------------------------------------------------------------
-- compiler.ast
--
-- Asteroid compiler
--
-- (c) University of Rhode Island
------------------------------------------------------------------
load system os.
load system io.
------------------------------------------------------------------
function __get_path
------------------------------------------------------------------
with none do return escape
"
global __retval__
import sys
__retval__ = ('string', sys.path[0])
"
end

function compile
------------------------------------------------------------------
with module:%string do
-- let file_name = module.
let dir_str = os@getdir().
let comp_path = __get_path().
io@println(comp_path).
let my_base = os@basename(dir_str).
io@println("hello world").
io@println(dir_str).
io@println(my_base).
-- let test_dir = "C:/Users/mjk84/Documents/CSC-499/tests".
-- let mod_dir = dir_str@replace ("/", "@").
let file_name = os@basename(module).
let (lone_name, extension) = os@splitext(file_name).
io@println(lone_name).
io@println(extension).
-- io@println file_name.
-- let ext = module@split ".".
-- let my_ext = ext@1.
-- io@println my_ext.
-- io@println(mod_dir).
-- let test_a = "import subprocess; my_process = subprocess.run('cd ".
-- let test_b = "' shell=True, capture_output=True, text=True)".
-- let test_ab = test_a + test_dir + test_b.
let front = 
"
import subprocess
import sys
print(sys.path[0])
ab_path = sys.path[0][:len(sys.path[0]) - len('asteroid')]
ab_path += 'compiler'
my_cmd = 'cd ' + ab_path
subprocess.run(my_cmd, shell=True, text=True, capture_output=True)
local_path_cmd = subprocess.run('pwd', shell=True, capture_output=True, text=True)
local_path = local_path_cmd.stdout
print(ab_path)
rust_output = subprocess.run('".
let back = "', shell=True, capture_output=True, text=True)".
-- let string_creation = 
-- "

-- str_a = 
-- ".
let compile_cmd_front = "python3 C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/ac.py ".
let compile_cmd_back = " > C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/" + lone_name + ".rs".
let ast_file_path =  module
let compile_cmd = compile_cmd_front + ast_file_path + compile_cmd_back.
let final = front + compile_cmd + back.
-- os@syscmd("pwd").
-- os@syscmd("cd ..").
-- os@syscmd("pwd").
-- let restore = "subprocess.run('cd " + dir_str + "' shell=True)"
-- let my_test_text = 
-- "
-- import subprocess
-- import sys
-- print(sys.path[0])
-- ab_path = sys.path[0][:len(sys.path[0]) - len('asteroid')]
-- ab_path += 'compiler'
-- print(ab_path)
-- my_cmd = 'cd ' + ab_path
-- subprocess.run(my_cmd, shell=True, capture_output)
-- subprocess.run('pwd', shell=True, text=True)
-- ".
escape
    -- code to compile module
    final.

-- "
-- import subprocess
-- subprocess.run('rustc --version')
-- subprocess.run('pwd')
-- print('I am compiling')
-- "
end

-- ------------------------------------------------------------------
-- function run
-- ------------------------------------------------------------------
-- with module:%string do
--     -- code to run module without parameters
-- with (module:%string, params:%list) do
--     -- code to run module with parameters
-- end

------------------------------------------------------------------
function __assert_compiler
------------------------------------------------------------------
with none do return escape
"
import subprocess

# lowest acceptable version of the compiler
minimum_version = '1.75.0'

compiler_check_command = subprocess.run('rustc --version', shell=True, capture_output=True, text=True)
compiler_string = compiler_check_command.stdout
compiler_error = compiler_check_command.stderr

# fails if no compiler is installed
# assert compiler_error == ''
if compiler_error != '':
    raise ImportError('\nRust Compiler not installed try visiting: \'https://www.rust-lang.org/tools/install\'')

# version verification
compiler_version = compiler_string.split(' ')[1]

min_list = minimum_version.split('.')
current_list = compiler_version.split('.')
if(len(min_list) != len(current_list)):
    raise ValueError('Version comparison strings dont match')
else:
    for (min_val, current_val) in zip(min_list, current_list):
        if int(current_val) < int(min_val):
            raise ImportError('\nRust Compiler not up to date, {} or higher is required try updating by running \'rustup update\''.format(minimum_version))
        elif int(current_val) > int(min_val):
            break
# fails if the compiler is not the correct version
"
end

__assert_compiler(). -- call to assert function at end of module