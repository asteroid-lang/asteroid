------------------------------------------------------------------
-- compiler.ast
--
-- Asteroid compiler
--
-- (c) University of Rhode Island
------------------------------------------------------------------

------------------------------------------------------------------
function compile
------------------------------------------------------------------
with module:%string do
-- let file_name = module.
let front = 
"
import subprocess
import sys
print(sys.path[0])
ab_path = sys.path[0][:len(sys.path[0]) - len('asteroid')]
ab_path += 'compiler\\ac.py'
local_path_cmd = subprocess.run('pwd', shell=True, capture_output=True, text=True)
local_path = local_path_cmd.stdout
print(ab_path)

rust_output = subprocess.run('".
let back = "', shell=True, capture_output=True, text=True)".
let compile_cmd_front = "python3 compiler/ac.py ".
let compile_cmd_back = " > compiler/toosimple.rs".
let ast_file_path = "local_path" + "/" + module
let compile_cmd = compile_cmd_front + ast_file_path + compile_cmd_back.
let final = front + compile_cmd + back.
escape
    -- code to compile module
    final
-- "
-- import subprocess
-- subprocess.run('rustc --version')
-- subprocess.run('pwd')
-- print('I am compiling')
-- "
end

-- ------------------------------------------------------------------
-- function run
-- ------------------------------------------------------------------
-- with module:%string do
--     -- code to run module without parameters
-- with (module:%string, params:%list) do
--     -- code to run module with parameters
-- end

------------------------------------------------------------------
function __assert_compiler
------------------------------------------------------------------
with none do return escape
"
import subprocess

# lowest acceptable version of the compiler
minimum_version = '1.75.0'

compiler_check_command = subprocess.run('rustc --version', shell=True, capture_output=True, text=True)
compiler_string = compiler_check_command.stdout
compiler_error = compiler_check_command.stderr

# fails if no compiler is installed
# assert compiler_error == ''
if compiler_error != '':
    raise ImportError('\nRust Compiler not installed try visiting: \'https://www.rust-lang.org/tools/install\'')

# version verification
compiler_version = compiler_string.split(' ')[1]

min_list = minimum_version.split('.')
current_list = compiler_version.split('.')
if(len(min_list) != len(current_list)):
    raise ValueError('Version comparison strings dont match')
else:
    for (min_val, current_val) in zip(min_list, current_list):
        if int(current_val) < int(min_val):
            raise ImportError('\nRust Compiler not up to date, {} or higher is required try updating by running \'rustup update\''.format(minimum_version))
        elif int(current_val) > int(min_val):
            break
# fails if the compiler is not the correct version
"
end

__assert_compiler(). -- call to assert function at end of module