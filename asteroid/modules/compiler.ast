------------------------------------------------------------------
-- compiler.ast
--
-- Asteroid compiler
--
-- (c) University of Rhode Island
------------------------------------------------------------------
load system os.
load system io.
------------------------------------------------------------------
function __get_path
------------------------------------------------------------------
with none do return escape
"
global __retval__
import sys
__retval__ = ('string', sys.path[0])
"
end

function compile
------------------------------------------------------------------
with module:%string do
-- gets the name of the file
let file_name = os@basename(module).
-- separates the file_name from the extension
let (lone_name, extension) = os@splitext(file_name).
--checks that the file is an asteroid file
assert(extension == ".ast").
--checks that the file is a file
assert(os@isfile(module)).
let dir_str = os@getdir().
--gets the path to where the python script is being run from
let comp_path = __get_path().
-- io@println(comp_path).
let (rootpath, my_base) = os@split(comp_path).
let ast_file_path = module.
os@syscmd("python3 " + rootpath + "/compiler/ac.py " + ast_file_path + " > " + rootpath + "/compiler/" + lone_name + ".rs").
-- I hard coded two sample version for testing to turn rust into an executable and could not get it working, they are commented out below
------------------------------------------------------------------------------------------------------
-- os@syscmd("C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/compile.sh " + "C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/" + lone_name + " C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/" + lone_name + ".rs").
-- os@syscmd("C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/compile.sh " + lone_name + " C:/Users/mjk84/Documents/CSC-499/asteroid/compiler/" + lone_name + ".rs").
------------------------------------------------------------------------------------------------------
-- rust compiler command, using variables and proposed final version of command, awaiting completion of the compile.sh script
os@syscmd(rootpath + "/compiler/compile.sh " + lone_name + " " + rootpath + "/compiler/" + lone_name + ".rs")
end

-- ------------------------------------------------------------------
-- function run
-- ------------------------------------------------------------------
-- with module:%string do
--     -- code to run module without parameters
-- with (module:%string, params:%list) do
--     -- code to run module with parameters
-- end

------------------------------------------------------------------
function __assert_compiler
------------------------------------------------------------------
with none do return escape
"
import subprocess

# lowest acceptable version of the compiler
minimum_version = '1.75.0'

compiler_check_command = subprocess.run('rustc --version', shell=True, capture_output=True, text=True)
compiler_string = compiler_check_command.stdout
compiler_error = compiler_check_command.stderr

# fails if no compiler is installed
# assert compiler_error == ''
if compiler_error != '':
    raise ImportError('\nRust Compiler not installed try visiting: \'https://www.rust-lang.org/tools/install\'')

# version verification
compiler_version = compiler_string.split(' ')[1]

min_list = minimum_version.split('.')
current_list = compiler_version.split('.')
if(len(min_list) != len(current_list)):
    raise ValueError('Version comparison strings dont match')
else:
    for (min_val, current_val) in zip(min_list, current_list):
        if int(current_val) < int(min_val):
            raise ImportError('\nRust Compiler not up to date, {} or higher is required try updating by running \'rustup update\''.format(minimum_version))
        elif int(current_val) > int(min_val):
            break
# fails if the compiler is not the correct version
"
end

__assert_compiler(). -- call to assert function at end of module