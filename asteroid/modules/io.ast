------------------------------------------------------------------
-- io.ast
--
-- this module implements the I/O system for Asteroid
--
-- (c) University of Rhode Island

-- define the io module.

------------------------------------------------------------------

------------------------------------------------------------------
structure __FILE__ with
------------------------------------------------------------------
-- Basic file i/o

data fd.

------------------------------------------------------------------
function __init__
------------------------------------------------------------------
with (name:%string, mode:%string) do escape
"
from asteroid.state import state
global __retval__

# Get variables
this_val = state.symbol_table.lookup_sym('this')
name_val = state.symbol_table.lookup_sym('name')
mode_val = state.symbol_table.lookup_sym('mode')

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(MEMBER_NAMES, (LIST, member_names)),
(OBJECT_MEMORY, (LIST, memory))) = this_val

# Open file
f = open(name_val[1], mode_val[1])
memory[0] = ('foreign', f)

__retval__ = this_val
"

with (std:%string) do escape
"
import sys
from asteroid.state import state

this_val = state.symbol_table.lookup_sym('this')
std_val = state.symbol_table.lookup_sym('std')[1]

stream = None
if std_val == '__STDIN__':
    stream = sys.stdin
elif std_val == '__STDOUT__':
    stream = sys.stdout
elif std_val == '__STDERR__':
    stream = sys.stderr
else:
    raise Exception('Unknown standard stream' + std_val)

# destructure object
(OBJECT,
(CLASS_ID, (ID, class_id)),
(MEMBER_NAMES, (LIST, member_names)),
(OBJECT_MEMORY, (LIST, memory))) = this_val

memory[0] = ('foreign', stream)
"

end
------------------------------------------------------------------

------------------------------------------------------------------
function close
------------------------------------------------------------------
with none do escape
"
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')

(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

(FOREIGN, f_val) = memory[0]
f_val.close()
"
end
------------------------------------------------------------------

------------------------------------------------------------------
function read
------------------------------------------------------------------
with none do return escape
"
global __retval__
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')

(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

(FOREIGN, f_val) = memory[0]

__retval__ = ('string', f_val.read())
"
end

------------------------------------------------------------------
function readln
------------------------------------------------------------------
with none do return escape
"
global __retval__
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')

(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

(FOREIGN, f_val) = memory[0]

__retval__ = ('string', f_val.readline())
"
end

------------------------------------------------------------------
function write
------------------------------------------------------------------
with (what:%string) do escape
"
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')
what_val = state.symbol_table.lookup_sym('what')

(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

(FOREIGN, f_val) = memory[0]

f_val.write(term2string(what_val))
"
end

------------------------------------------------------------------
end -- __FILE__
------------------------------------------------------------------




-- Predefined standard stream constants
let __STDIN__ = __FILE__("__STDIN__").
let __STDOUT__ = __FILE__("__STDOUT__").
let __STDERR__ = __FILE__("__STDERR__").

-- File I/O library functions
------------------------------------------------------------------
function open
-- Open a file given a filename and mode
------------------------------------------------------------------
with (name:%string, mode:%string) do
   return __FILE__(name, mode).
end

------------------------------------------------------------------
function close
-- Close a given file
------------------------------------------------------------------
with(file:%__FILE__) do
    file @close().
end

------------------------------------------------------------------
function read
-- Return the contents of a given file
------------------------------------------------------------------
with(file:%__FILE__) do
    return file @read().
with none do
    return __STDIN__ @ read().
end

------------------------------------------------------------------
function readln
-- Return the next line of a given file
-- Note: readln reads a single line from the stream; a newline
-- character (\n) is left at the end of the string, and is only
-- omitted on the last line of the file if the file doesnâ€™t end
-- in a newline. This makes the return value unambiguous;
-- if readln returns an empty string, the end of the file has
-- been reached, while a blank line is represented by '\n',
-- a string containing only a single newline.
------------------------------------------------------------------
with(file:%__FILE__) do
    return file @readln().
with none do
    return __STDIN__ @readln().
end

------------------------------------------------------------------
function write
-- Write to a given file
------------------------------------------------------------------
with what:%string do
    __STDOUT__ @write(what).
    escape "import sys;sys.stdout.flush()".
with(file:%__FILE__, what:%string) do
    file @write(what).
end

------------------------------------------------------------------
function writeln
-- Write a complete line to a given file
------------------------------------------------------------------
with what:%string do
    __STDOUT__ @write(what + "\n").

with(file:%__FILE__, what:%string) do
    file @write(what + "\n").
end
------------------------------------------------------------------

-- Basic console I/O functions

------------------------------------------------------------------
function println
------------------------------------------------------------------
with item do
    writeln(tostring item).
end

------------------------------------------------------------------
function print
------------------------------------------------------------------
with item do
    write(tostring item).
end

------------------------------------------------------------------
function input
------------------------------------------------------------------
-- input drops the trailing newline char
with none do
    return readln() @replace("\n","").
with prompt do
    write (tostring prompt).
    return readln() @replace("\n","").
end

------------------------------------------------------------------
function __raw_print__
------------------------------------------------------------------
-- dumps the AST to screen
with item do escape
"
from pprint import pprint
item_val = state.symbol_table.lookup_sym('item')
pprint(item_val)
"
return none
end

