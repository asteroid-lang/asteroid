------------------------------------------------------------------
-- Defines the Asteroid DataFrames structure.
--
-- TODO: this is more of a proof of concept implementation
-- demonstrating that we can have objects with escaped
-- implementations.  DataFrames needs lots more functionality.
------------------------------------------------------------------

------------------------------------------------------------------
structure DataFrame with
------------------------------------------------------------------

------------------------------------------------------------------
data df.
------------------------------------------------------------------

------------------------------------------------------------------
function read_csv
------------------------------------------------------------------
with (file,header_row) do escape
"
from asteroid.state import state
import pandas

this_val = state.symbol_table.lookup_sym('this')
file_val = state.symbol_table.lookup_sym('file')
header_row_val = state.symbol_table.lookup_sym('header_row')

# destructure object
(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

# read as Pandas dataframe
df = pandas.read_csv(file_val[1], header=0 if header_row_val[1] else None)

# the dataframe is in the first slot in the object memory
# store the Pandas dataframe as a foreign object in this slot
memory[0] = ('foreign', df)
"
end

------------------------------------------------------------------
function row
------------------------------------------------------------------
with ix do return escape
"
global __retval__
import numpy
from asteroid.state import state

this_val = state.symbol_table.lookup_sym('this')
ix_val = state.symbol_table.lookup_sym('ix')

# destructure object
(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

 # the dataframe is in the first slot in the object memory
(FOREIGN, df_val) = memory[0]

row = df_val.iloc[ix_val[1],:]
lst = []
for e in row:
  if isinstance(e, bool):
    lst.append(('boolean', e))
  elif isinstance(e, int):
    lst.append(('integer', e))
  elif isinstance(e, float):
    lst.append(('real', e))
  elif isinstance(e, numpy.bool_):
    lst.append(('boolean', e))
  elif isinstance(e, str):
    lst.append(('string', e))
  else:
    raise ValueError('unknown type {}'.format(type(e)))

__retval__ = ('list', lst)
"
end

------------------------------------------------------------------
function col
------------------------------------------------------------------
with ix do return escape
"
global __retval__
from asteroid.state import state
import numpy
this_val = state.symbol_table.lookup_sym('this')
ix_val = state.symbol_table.lookup_sym('ix')

# destructure object
(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

 # the dataframe is in the first slot in the object memory
(FOREIGN, df_val) = memory[0]

col = df_val.iloc[:,ix_val[1]]
lst = []
for e in col:
  if isinstance(e, bool):
    lst.append(('boolean', e))
  elif isinstance(e, int):
    lst.append(('integer', e))
  elif isinstance(e, float):
    lst.append(('real', e))
  elif isinstance(e, numpy.bool_):
    lst.append(('boolean', e))
  elif isinstance(e, str):
    lst.append(('string', e))
  else:
    raise ValueError('unknown type {}'.format(type(e)))

__retval__ = ('list', lst)
"
end

------------------------------------------------------------------
function nrow
------------------------------------------------------------------
with none do return escape
"
global __retval__
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')

# destructure object
(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

 # the dataframe is in the first slot in the object memory
(FOREIGN, df_val) = memory[0]
__retval__ = ('integer', df_val.shape[0])
"
end

------------------------------------------------------------------
function ncol
------------------------------------------------------------------
with none do return escape
"
global __retval__
from asteroid.state import state
this_val = state.symbol_table.lookup_sym('this')

# destructure object
(OBJECT,
 (CLASS_ID, (ID, class_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

 # the dataframe is in the first slot in the object memory
(FOREIGN, df_val) = memory[0]
__retval__ = ('integer', df_val.shape[1])
"
end
end -- DataFrame structure


function dataframe with none do
  return DataFrame().
end


