------------------------------------------------------------------
-- hash.ast
--
-- this module implements the HashTable structure
--
-- (c) Lutz Hamel, University of Rhode Island
------------------------------------------------------------------


------------------------------------------------------------------
structure Hash with
------------------------------------------------------------------
-- Asteroid hash table implementation using Python dictionaries

------------------------------------------------------------------
data table.

------------------------------------------------------------------
function __init__
------------------------------------------------------------------
-- constructor for HashTable initializes the underlying dictionary
with none do escape
"
this_val = state.symbol_table.lookup_sym('this')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

# the table is in the first slot in the object memory
# store the dictionary as a foreign object in this slot
memory[0] = ('foreign', dict())
"
end -- __init__

------------------------------------------------------------------
function insert
------------------------------------------------------------------
with (name,value) do 
return escape
"
global __retval__
this_val = state.symbol_table.lookup_sym('this')
name_val = state.symbol_table.lookup_sym('name')
value_val = state.symbol_table.lookup_sym('value')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

# the table is in the first slot in the object memory
# insert name-value pair
(FOREIGN, dictionary) = memory[0]
dictionary[name_val] = value_val

__retval__ = this_val
"
with item_list:%list do
  for (k,v) in item_list do
    this @insert (k,v).
  end
  return this
end -- insert

------------------------------------------------------------------
function get
------------------------------------------------------------------
with name do return escape
"
global __retval__

this_val = state.symbol_table.lookup_sym('this')
name_val = state.symbol_table.lookup_sym('name')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

# the table is in the first slot in the object memory
# get the value_val associated with name_val
(FOREIGN, dictionary) = memory[0]
if name_val not in dictionary.keys():
    __retval__ = ('none', None)
else:
    __retval__ = dictionary[name_val]
"
end -- get

------------------------------------------------------------------
function aslist
------------------------------------------------------------------
with none do return escape
"
global __retval__

this_val = state.symbol_table.lookup_sym('this')

# destructure object
(OBJECT,
 (STRUCT_ID, (ID, struct_id)),
 (MEMBER_NAMES, (LIST, member_names)),
 (OBJECT_MEMORY, (LIST, memory))) = this_val

# the table is in the first slot in the object memory
# get the value_val associated with name_val
(FOREIGN, dictionary) = memory[0]

# zip the keys and the values
kl = dictionary.keys()
vl = dictionary.values()
l = list(zip(kl,vl))

# turn Python tuples into Asteroid tuples and
# put them onto an output list
out_list = []
for (i,t) in l:
  out_list.append(('tuple',[i,t]))

__retval__ = ('list', out_list)
"
end -- aslist

------------------------------------------------------------------
function __str__
------------------------------------------------------------------
with none do
  return tostring (this @aslist ()).
end -- __str__

end -- Hash structure

-- here for backwards compatibility
function hash with none do
   return Hash().
end


