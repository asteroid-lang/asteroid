------------------------------------------------------------------
-- vector.ast
--
-- this module defines functions useful for vector arithmetic
--
-- (c) University of Rhode Island
------------------------------------------------------------------

load system util.

------------------------------------------------------------------
function add
------------------------------------------------------------------
with (a,b) do
  return op(lambda with (x,y) do x+y,a,b).
end

------------------------------------------------------------------
function dot
-- computes the dot product of two lists
------------------------------------------------------------------
with (a:%list,b:%list) do
  return mult(a,b) @reduce(lambda with (x,y) do x+y).
end

------------------------------------------------------------------
function mult
------------------------------------------------------------------
with (a,b) do
  return op(lambda with (x,y) do x*y,a,b).
end

------------------------------------------------------------------
function op
------------------------------------------------------------------
-- worker function for actual vector arithmetic
-- Note: it also implements vector/scalar arithmetic
with (f:%function,a:%list,b:%list) do
  if a @length() =/= b @length() do
      throw Error("vector operations only defined on lists of the same length").
  end
  let v = util @zip(a,b).
  return v @map(f).
with (f:%function,a:%list,b if isscalar b) do
  -- promote b to a vector
  let bv = [1 to a @length()] @map(lambda with _ do b).
  let v = util @zip(a,bv).
  return v @map(f).
with (f:%function,a if isscalar a,b:%list) do
  -- promote a to a vector
  let av = [1 to b @length()] @map(lambda with _ do a).
  let v = util @zip(av,b).
  return v @map(f).
end

------------------------------------------------------------------
function sub
------------------------------------------------------------------
with (a,b) do
  return op(lambda with (x,y) do x-y,a,b).
end


