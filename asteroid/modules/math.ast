------------------------------------------------------------------
-- math.ast
--
-- this module implements the mathematical operators
-- and constants.
--
-- (c) University of Rhode Island
------------------------------------------------------------------

structure __MATH_MODULE__ with

------------------------------------------------------------------
-- Constants
------------------------------------------------------------------
data pi.
data e.

function __init__ with none do

let this @pi = escape -- init pi constant
"
from math import pi
global __retval__
__retval__ = ('real',pi)
"

let this @e = escape -- init e constant
"
from math import e
global __retval__
__retval__ = ('real',e)
"

end -- __init__

------------------------------------------------------------------
-- Power and logarithmic functions
------------------------------------------------------------------

------------------------------------------------------------------
function exp
------------------------------------------------------------------
-- Return e raised to the power x, where e = 2.718281â€¦ is the
-- base of natural logarithms.
with (x:%integer) do return escape
"
global __retval__
import math

val_x = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.exp(val_x[1]))
"
end

------------------------------------------------------------------
function log
------------------------------------------------------------------
-- With one argument, return the natural logarithm of x (to base e).
--
-- With two arguments, return the logarithm of x to the given base,
-- calculated as log(x)/log(base).
with x do return escape
"
global __retval__
import math

val_x = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.log(val_x[1]))
"
with (x,base:%integer) do return escape
"
global __retval__
import math

val_x = state.symbol_table.lookup_sym('x')
val_base = state.symbol_table.lookup_sym('base')

__retval__ = ('real', math.log(val_x[1],val_base[1]))
"
end

------------------------------------------------------------------
function pow
------------------------------------------------------------------
with (b,p:%integer) do return escape
"
global __retval__
from asteroid.state import state

val_b = state.symbol_table.lookup_sym('b')
val_p = state.symbol_table.lookup_sym('p')

if val_b[0] not in ['integer','real']:
  raise ValueError('unsupported type \'{}\' for pow'.format(val_b[0]))

__retval__ = (val_b[0],val_b[1]**val_p[1])
"
end

------------------------------------------------------------------
function sqrt
------------------------------------------------------------------
with a do return escape
"
global __retval__
from asteroid.state import state
from math import sqrt

val_a = state.symbol_table.lookup_sym('a')
if val_a[0] not in ['integer','real']:
  raise ValueError('unsupported type \'{}\' for sqrt'.format(val_a[0]))
__retval__ = ('real',sqrt(val_a[1]))
"
end

------------------------------------------------------------------
-- Number-theoretic and representation functions
------------------------------------------------------------------

------------------------------------------------------------------
function abs
------------------------------------------------------------------
-- Return the absolute value of x.
with x do return escape
"
global __retval__

val_x = state.symbol_table.lookup_sym('x')

__retval__ = (val_x[0], abs(val_x[1]))
"
end

------------------------------------------------------------------
function ceil
------------------------------------------------------------------
-- Return the ceiling of x, the smallest integer greater than or
-- equal to x.
with (x:%real) do return escape
"
global __retval__
import math

val_x = state.symbol_table.lookup_sym('x')

__retval__ = ('integer', math.ceil(val_x[1]))
"
end

------------------------------------------------------------------
function floor
------------------------------------------------------------------
-- Return the floor of x, the largest integer less than or
-- equal to x.
with (x:%real) do return escape
"
global __retval__
import math

val_x = state.symbol_table.lookup_sym('x')

__retval__ = ('integer', math.floor(val_x[1]))
"
end

------------------------------------------------------------------
function gcd
------------------------------------------------------------------
with (a:%integer,b:%integer) do return escape
"
global __retval__
from math import gcd

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')


__retval__ = ('integer', gcd(val_a[1], val_b[1]))
"
end

------------------------------------------------------------------
function isclose
------------------------------------------------------------------
-- Return True if the values a and b are close to each other
-- and false otherwise.  Default tolerance 1e-09
with (a,b) do return escape
"
global __retval__
import math

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')

__retval__ = ('boolean', math.isclose(val_a[1], val_b[1]))
"
with (a,b,t) do return escape
"
global __retval__
import math

val_a = state.symbol_table.lookup_sym('a')
val_b = state.symbol_table.lookup_sym('b')
val_t = state.symbol_table.lookup_sym('t')

__retval__ = ('boolean', math.isclose(val_a[1], val_b[1], rel_tol=val_t[1]))
"
end

------------------------------------------------------------------
function mod
------------------------------------------------------------------
with (v,d) do return escape
"
global __retval__
from asteroid.state import state
from asteroid.support import promote

val_v = state.symbol_table.lookup_sym('v')
val_d = state.symbol_table.lookup_sym('d')

if val_v[0] not in ['integer','real']:
  raise ValueError('unsupported type \'{}\' for mod'.format(val_v[0]))

if val_d[0] not in ['integer','real']:
  raise ValueError('unsupported type \'{}\' for mod'.format(val_d[0]))

__retval__ = (promote(val_v[0],val_d[0]),val_v[1] % val_d[1])
"
end


------------------------------------------------------------------
-- Trigonometric functions
------------------------------------------------------------------

------------------------------------------------------------------
function acos
------------------------------------------------------------------
-- Return the arc cosine of x, in radians. The result is
-- between 0 and pi.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.acos(x_val[1]))
"
end

------------------------------------------------------------------
function asin
------------------------------------------------------------------
-- Return the arc sine of x, in radians. The result is between -pi/2
-- and pi/2.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.asin(x_val[1]))
"
end

------------------------------------------------------------------
function atan
------------------------------------------------------------------
-- Return the arc tangent of x, in radians. The result is
-- between -pi/2 and pi/2.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.atan(x_val[1]))
"
end

------------------------------------------------------------------
function cos
------------------------------------------------------------------
-- Return the cosine of x radians.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.cos(x_val[1]))
"
end

------------------------------------------------------------------
function sin
------------------------------------------------------------------
-- Return the sine of x radians.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.sin(x_val[1]))
"
end

------------------------------------------------------------------
function tan
------------------------------------------------------------------
-- Return the tangent of x radians.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.tan(x_val[1]))
"
end

------------------------------------------------------------------
function acosh
------------------------------------------------------------------
-- Return the inverse hyperbolic cosine of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.acosh(x_val[1]))
"
end

------------------------------------------------------------------
function asinh
------------------------------------------------------------------
-- Return the inverse hyperbolic sine of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.asinh(x_val[1]))
"
end

------------------------------------------------------------------
function atanh
------------------------------------------------------------------
-- Return the inverse hyperbolic tangent of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.atanh(x_val[1]))
"
end

------------------------------------------------------------------
function cosh
------------------------------------------------------------------
-- Return the hyperbolic cosine of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.cosh(x_val[1]))
"
end

------------------------------------------------------------------
function sinh
------------------------------------------------------------------
-- Return the hyperbolic sine of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.sinh(x_val[1]))
"
end

------------------------------------------------------------------
function tanh
------------------------------------------------------------------
-- Return the hyperbolic tangent of x.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.tanh(x_val[1]))
"
end

------------------------------------------------------------------
function degrees
------------------------------------------------------------------
-- Convert angle x from radians to degrees.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.degrees(x_val[1]))
"
end

------------------------------------------------------------------
function radians
------------------------------------------------------------------
-- Convert angle x from degrees to radians.
with (x) do return escape
"
import math
global __retval__

x_val = state.symbol_table.lookup_sym('x')

__retval__ = ('real', math.radians(x_val[1]))
"
end

end -- __MATH_MODULE__

let math = __MATH_MODULE__()
